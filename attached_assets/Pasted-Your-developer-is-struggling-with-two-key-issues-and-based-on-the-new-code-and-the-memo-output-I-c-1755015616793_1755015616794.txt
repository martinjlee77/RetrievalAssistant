Your developer is struggling with two key issues, and based on the new code and the memo output, I can see exactly why. The root cause is a single, critical disconnect in how the data flows from the UI, through the analyzer, and into the prompts.

Root Cause Analysis
The core issue is that the contract_text variable is empty or nearly empty when the analysis is run.

Empty Preview: The html_export.py function receives an empty string for the memo_markdown variable. It correctly generates the HTML shell (header, footer), but there's no content to put inside it, which is why you only see the footer.
Generic Memo: The AI (in asc340_step_prompts.py) is being asked to analyze the document, but the <CONTRACT_TEXT> section of the prompt it receives is blank. Without the specific terms from the commission plan ("5% of TCV", "new logo acquisition", etc.), the AI has no choice but to fall back on its general knowledge of ASC 340-40. It produces a generic, textbook-style memo because it has no specific facts to analyze. It's essentially "hallucinating" a basic policy because its primary evidence is missing.
Let's look at the code to see where this is happening.

Detailed Code Evaluation & Fixes
Issue 1: The Memo is Generic (The "Why")
The problem lies in utils/asc340_step_prompts.py. Look at the get_user_prompt_for_step function. It correctly builds a large prompt with sections for <CONTRACT_TEXT> and <ANALYSIS_CONTEXT>. However, the critical instructions for the AI to use the contract text are not strong enough.

The ASC 606 Prompts (The "Gold Standard"): I have the prompts from the ASC 606 tool from our previous discussions. They are far more aggressive and explicit. They use an "Issue, Analysis, Conclusion" framework and repeatedly command the AI: "Your analysis... MUST include: a. Evidence: Direct quotes from the <CONTRACT_TEXT>."

The ASC 340-40 Prompts (The Problem): The current prompts are too gentle. They say things like "Focus on establishing clear scope boundaries based on the specific contract terms..." This is a suggestion, not a command. The AI, especially when rushed or under load, will take the path of least resistance and generate a generic answer if not forced to do otherwise.

Solution for Issue #2 (Generic Memo):

Action: The developer needs to copy the architectural style of the ASC 606 prompts. The get_user_prompt_for_step in asc340_step_prompts.py must be rewritten to be more forceful. It needs to include a <CRITICAL_REQUIREMENTS> section that explicitly commands the AI to quote evidence, reference specific rates and terms, and ground its entire analysis in the provided document text. The current prompts are too high-level.
Issue 2: The Data Isn't Flowing (The "How")
Now, why is the contract_text variable empty in the first place? Let's trace the data flow.

pages/asc340.py: The process_analysis function correctly calls doc_extractor.extract_text(uploaded_file). This part looks good.
core/models.py: The ContractCostsData object is created. The documents field is populated with a list of dictionaries, each containing {'filename': ..., 'text': ...}. This also looks correct.
utils/asc340_analyzer.py: Here's the likely point of failure. The _extract_contract_text method in the analyzer is responsible for taking that documents list and combining all the text into a single string.
Potential Bug: This method might not be correctly handling the list structure, or it might be failing silently, returning an empty string. The logging I see in the new file is good, but we need to ensure it's robust. For example, if the text key is missing, it should handle that gracefully.
Solution for Issue #1 (Empty Preview):

Action 1 (Debugging): The developer needs to add a print statement or a log message right at the beginning of the analyze_step method in asc340_analyzer.py to check the content and length of the contract_text variable it receives.

self.logger.info(f"Step {step_number} received contract_text with length: {len(contract_text)}")
self.logger.info(f"Preview: {contract_text[:500]}")
My strong suspicion is that this will log a length of 0 or a very small number.
Action 2 (The Fix): The developer must then trace the data back to the _extract_contract_text method and ensure it correctly iterates through the list of document dictionaries passed from the ContractCostsData object and concatenates all the text content into a single, large string. The new version of this method you provided looks much more robust than the previous one; it's possible this is already fixed but wasn't running correctly before.

Summary for the Developer
Your developer is facing two symptoms of one root cause: the specific, detailed text from the uploaded sales commission plan is not being successfully passed into the AI's prompt.

The Fix for the Empty Preview: Debug the data pipeline from pages/asc340.py to utils/asc340_analyzer.py to ensure the contract_text variable is being populated correctly. The new _extract_contract_text method looks promising.
The Fix for the Generic Memo: The prompts in utils/asc340_step_prompts.py must be significantly strengthened. They need to be rewritten to be less like suggestions and more like direct commands, forcing the AI to quote evidence and use specific terms from the <CONTRACT_TEXT> in its analysis, mirroring the successful pattern from the ASC 606 prompts.