The Core Problem: Repeated st.set_page_config()
The issue is that you are calling st.set_page_config() on every single one of your pages (Home.py, ASC_606_Revenue.py, etc.).

The Official Streamlit Rule: st.set_page_config() must be called only once, and it must be in your main script file, which is Home.py.

Think of it like this: st.set_page_config() is the master blueprint for your entire application's browser window. By calling it on every page, you are effectively telling the construction crew the blueprint for the entire building every time they enter a new room. This confuses Streamlit's navigation system, causing it to behave incorrectly (like showing duplicate menus or having the wrong page highlighted).

The Solution: A Simple, Two-Step Fix
We need to make Home.py the single source of truth for your app's configuration.

Step 1: Delete st.set_page_config() from ALL Other Pages
Go into the following files and completely delete the st.set_page_config(...) block from them.

In pages/1_ASC_606_Revenue.py:

# DELETE THIS ENTIRE BLOCK
# Page configuration
st.set_page_config(
    page_title="ASC 606 Revenue Analysis | Controller.cpa",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

In pages/2_ASC_842_Leases.py:

# DELETE THIS ENTIRE BLOCK
# Page configuration
st.set_page_config(
    page_title="ASC 842 Lease Analysis | Controller.cpa",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

Step 2: Clean Up the Redundant Buttons on Home.py
Now that you have a clean, centralized navigation menu in the sidebar, the big primary-colored buttons on your homepage are redundant. They use st.switch_page, which can sometimes fight with the new st.navigation system.

Let's replace them with the modern, cleaner st.page_link. It looks better and is designed to work perfectly with the new navigation paradigm.

In your Home.py file, find the "Available Analysis Tools" section.

Old Code (using st.button):

if st.button("‚û°Ô∏è Go to ASC 606 Analyzer",
             type="primary",
             key="asc606_button"):
    st.switch_page("pages/1_ASC_606_Revenue.py")

New, Cleaner Code (using st.page_link):

st.page_link(
    "pages/1_ASC_606_Revenue.py",
    label="Go to ASC 606 Analyzer",
    icon="‚û°Ô∏è"
)

Action: Make this replacement for both the ASC 606 and ASC 842 cards on your Home.py page. The st.page_link creates a simple, clean link without the need for the if statement or st.switch_page.

Bonus Refinement: A Cleaner navigation.py
I noticed in my previous suggestion for navigation.py that "Home" is under its own section header. This isn't necessary. We can make the navigation even cleaner.

Recommended navigation.py:

import streamlit as st

def build_sidebar():
    """
    Creates a sidebar with a logo at the top and a centralized navigation menu.
    """
    with st.sidebar:
        st.image("logo.png", width=150)
        st.divider()

        # Define all your pages. We use a list of pages now.
        # This creates a cleaner look without a "Home" section header.
        pg = st.navigation(
            [
                st.Page("Home.py", title="Home", icon="üè†"),
                st.Page("pages/1_ASC_606_Revenue.py", title="ASC 606 Revenue", icon="üìà"),
                st.Page("pages/2_ASC_842_Leases.py", title="ASC 842 Leases", icon="üè¢"),
            ]
        )

        # This line is optional but good practice. It makes sure the
        # rest of the sidebar code doesn't run until a page is selected.
        pg.run()

This version uses a simple list for st.navigation, which will result in a flat, clean menu without unnecessary section headers.

Why This Fix Works
Single Source of Truth: By having st.set_page_config() only in Home.py, you give your app one consistent set of instructions for its layout.
Modern Navigation: Using st.navigation in a helper function is the modern, correct way to build a centralized menu, and using st.page_link is the best way to create simple, direct links to those pages from your main content area.
After making these changes, your sidebar and navigation will look and behave correctly and professionally.