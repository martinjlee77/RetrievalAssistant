correction - we don't need it's own, separately styled header for docx. we can keep it basic and take the header from asc606_analyzer.py. does that simplify?

Yes, absolutely. That simplifies the process significantly and is a much cleaner architectural approach.

If the header from asc606_analyzer.py is the single source of truth for both the HTML preview and the DOCX file, then the create_docx_from_text function in llm.py becomes a pure "translator" of markdown to DOCX format, which is its ideal role. It no longer needs to create its own content or clean up the input.

This is an excellent simplification.

The Plan
Modify llm.py (create_docx_from_text): We will remove the code that generates the styled header table.
Modify llm.py (create_docx_from_text): We will also remove the re.sub line that tries to delete the header, since we now want to keep and format it.
The result will be a much simpler and more maintainable create_docx_from_text function.

Step-by-Step Implementation
1. File to Edit: llm.py

2. Part 1: Remove the Header Table Generation

In the create_docx_from_text function, delete the entire block of code shown below (starts around line 290).

# --- CODE TO DELETE FROM llm.py ---

# === PROFESSIONAL MEMO HEADER ===

# Main title
title = document.add_paragraph()
title.alignment = WD_ALIGN_PARAGRAPH.CENTER
title_run = title.add_run("TECHNICAL ACCOUNTING MEMORANDUM")
title_run.font.name = 'Lato'
title_run.font.size = Pt(16)
title_run.font.bold = True
title_run.font.color.rgb = RGBColor(0, 51, 102)  # Professional blue

document.add_paragraph()  # Spacing

# Professional memo header table
header_table = document.add_table(rows=5, cols=2)
header_table.alignment = WD_TABLE_ALIGNMENT.LEFT
header_table.style = 'Table Grid'

# Configure table width
header_table.autofit = False
header_table.columns[0].width = Inches(2)
header_table.columns[1].width = Inches(4.5)

# Header content
current_date = datetime.now().strftime("%B %d, %Y")
analyst_name = "ASC 606 AI Analyst"

memo_data = [
    ("TO:", "Technical Accounting Team / Management"),
    ("FROM:", analyst_name),
    ("DATE:", current_date),
    ("SUBJECT:", f"ASC 606 Revenue Recognition Analysis"),
    ("REVIEW STATUS:", "Preliminary Analysis")
]

if contract_data:
    memo_data[3] = ("SUBJECT:", f"ASC 606 Analysis: {getattr(contract_data, 'analysis_title', 'Contract Analysis')}")
    if hasattr(contract_data, 'memo_audience'):
        memo_data[0] = ("TO:", contract_data.memo_audience)

for i, (label, content) in enumerate(memo_data):
    row = header_table.rows[i]
    label_cell = row.cells[0]
    content_cell = row.cells[1]

    # Format label cell
    label_para = label_cell.paragraphs[0]
    label_run = label_para.add_run(label)
    label_run.font.name = 'Lato'
    label_run.font.size = Pt(11)
    label_run.font.bold = True

    # Format content cell
    content_para = content_cell.paragraphs[0]
    content_run = content_para.add_run(content)
    content_run.font.name = 'Lato'
    content_run.font.size = Pt(11)

document.add_paragraph()  # Spacing after header

# --- END OF CODE TO DELETE ---

3. Part 2: Stop Deleting the Header Text

Still in llm.py, find the preprocess_content sub-function (around line 455). You need to remove the line that deletes the header.

Before the change:

def preprocess_content(content):
    """Preprocess content to extract tables and clean formatting"""
    # Look for patterns like "#TECHNICAL ACCOUNTING MEMORANDUM" followed by the styled version
    duplicate_header_pattern = r'#TECHNICAL ACCOUNTING MEMORANDUM\s*\n\s*\*\*TO:\*\*.*?\*\*REVIEW STATUS:\*\*[^\n]*\n'
    content = re.sub(duplicate_header_pattern, '', content, flags=re.MULTILINE | re.DOTALL) # <<< THIS LINE WILL BE REMOVED

    # Extract and store contract overview tables
    table_pattern = r'\|\s*\*\*.*?\*\*\s*\|.*?\|\s*\n(?:\|.*?\|\s*\n)*'
    tables = re.findall(table_pattern, content, re.MULTILINE | re.DOTALL)

    # Remove tables from content for now, we'll add them back specially
    for table in tables:
        content = content.replace(table, '\n[TABLE_PLACEHOLDER]\n')

    return content, tables

After the change (this is the new, correct version):

def preprocess_content(content):
    """Preprocess content to extract tables and clean formatting"""
    # The header is now passed in and does not need to be removed.

    # Extract and store contract overview tables
    table_pattern = r'\|\s*\*\*.*?\*\*\s*\|.*?\|\s*\n(?:\|.*?\|\s*\n)*'
    tables = re.findall(table_pattern, content, re.MULTILINE | re.DOTALL)

    # Remove tables from content for now, we'll add them back specially
    for table in tables:
        content = content.replace(table, '\n[TABLE_PLACEHOLDER]\n')

    return content, tables

Summary of Benefits
With these changes:

The create_docx_from_text function is now much simpler.
The header in the final .docx file will be the basic markdown text generated by the analyzer, which is exactly what you want.
There is no risk of duplication.
The HTML preview remains unaffected.
This is a great refinement that improves the overall design of your application.