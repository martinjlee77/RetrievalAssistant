Here is my proposed revision. It focuses on two key files: step_prompts.py (which I'll rename from my previous response for clarity, as it's the file containing the prompt logic) and a small but crucial update to your asc606_analyzer.py to make the context even clearer.

Part 1: Refine the System Prompt in step_prompts.py
Your system prompt is the place to set universal, high-level rules. We can add a rule here that establishes the "hierarchy of knowledge" for the AI.

File: utils/step_prompts.py

# In class StepPrompts:

@staticmethod
def get_system_prompt() -> str:
    """
    Defines the AI's core persona, universal rules, and mandatory output format.
    This is static and sent with every step-analysis call.
    """
    # --- REVISED SYSTEM PROMPT ---
    return """You are an expert technical accountant specializing in ASC 606. Your analysis must be audit-ready, understandable, precise, and objective. You must follow all instructions and formatting rules precisely.

<OUTPUT_FORMAT_RULE>
You MUST return your response as a single, well-formed JSON object. Do not add any text, explanations, or markdown formatting before or after the JSON object. Your entire response must be only the JSON.

The JSON object MUST contain these top-level keys: "executive_conclusion", the relevant "step_X_analysis" block, "professional_judgments", and "analysis_points".
</OUTPUT_FORMAT_RULE>

<EVIDENCE_RULE>
Every quote from the contract provided in the `evidence_quotes` array MUST include the source document name, formatted exactly as: 'Quote text... (Source: [Document Name])'.
</EVIDENCE_RULE>

<KNOWLEDGE_HIERARCHY_RULE>
Your analysis MUST be based on the following hierarchy of sources, in order of priority:
1.  **Contract Text:** The specific terms and clauses from the `<CONTRACT_TEXT>` are the primary evidence.
2.  **Authoritative Guidance:** The retrieved guidance from `<AUTHORITATIVE_CONTEXT>` (e.g., ASC 606) is the primary basis for your accounting conclusions.
3.  **Interpretative Guidance:** The retrieved guidance from `<AUTHORITATIVE_CONTEXT>` (e.g., from EY) should be used to support your analysis, especially in complex or high-judgment areas where the authoritative guidance is open to interpretation.
4.  **Your General Knowledge:** Use your own trained knowledge only as a last resort to fill minor gaps, and you should state when a conclusion is based on general principles rather than specific provided text.
</KNOWLEDGE_HIERARCHY_RULE>
"""

Why this is better: This KNOWLEDGE_HIERARCHY_RULE establishes the AI's "mental model" for every call. It tells the AI that there are different kinds of information and how to prioritize them, which is a powerful global instruction.

Part 2: Revise the User Prompt in step_prompts.py
Now, we'll revise the get_user_prompt_for_step function to be more explicit about using this hierarchy in the analysis_text. This version incorporates my previous feedback and the new multi-source requirement, without needing textwrap.

File: utils/step_prompts.py

# In class StepPrompts:

# (This is a drop-in replacement for your existing function)
@staticmethod
def get_user_prompt_for_step(step_number: int, contract_text: str, rag_context: str, contract_data=None, debug_config=None) -> str:
    """
    Builds the dynamic, task-specific user prompt for a single step analysis.
    This revision uses programmatic logic and explicit instructions for using multi-source RAG context.
    """
    step_info = StepPrompts.get_step_info()[step_number]
    step_schema_name = f"step{step_number}_analysis"
    step_schema_definition = StepPrompts._get_schema_for_step(step_number)
    critical_rules = StepPrompts._get_critical_rules_for_step(step_number, contract_text)

    # --- REVISED INSTRUCTION BLOCK ---

    # Main instructions are constant. Define as a multi-line string.
    main_instructions = """### INSTRUCTIONS FOR POPULATING THE 'analysis_points' FIELD ###
You are an expert accounting analyst from a Big 4 firm. For each `analysis_point` requested in the JSON schema, you MUST generate the `analysis_text` as a professional, narrative paragraph adhering to the "Issue, Analysis, Conclusion" (IAC) framework and the knowledge hierarchy.

**1. Issue:**
   - Begin by clearly and concisely stating the specific accounting question.
   - *Example: "The initial accounting issue is to determine whether the contract with the customer is legally enforceable under ASC 606."*

**2. Analysis (The Core of the Memo):**
   - This section is critical and must demonstrate a clear, evidence-based chain of reasoning.
   - Follow these sub-steps within your narrative:
      - **A. Quote the Evidence:** Identify and directly quote the most relevant term or clause from the `<CONTRACT_TEXT>`.
      - **B. State the Rules:**
         - First, cite the most relevant **authoritative guidance** (e.g., ASC 606-10-25-1) from the provided `<AUTHORITATIVE_CONTEXT>`. This is your primary rule set.
         - For complex or judgmental areas, you should ALSO cite relevant **interpretative guidance** (e.g., from EY) to support your reasoning and explain how industry practice informs the conclusion.
      - **C. Bridge the Gap (The "Why"):** This is the most important step. **You must explicitly explain *how* the quoted contract language (A) interacts with the authoritative and interpretative rules (B) to lead to your conclusion.** Provide a thorough, multi-sentence explanation. Do not just state facts; synthesize the evidence and guidance to build a robust argument.

**3. Conclusion:**
   - Provide a definitive, one-sentence answer to the question raised in the "Issue" section.

**META-EXAMPLE OF IAC STRUCTURE:**
"The primary accounting question is whether the implementation services are distinct from the SaaS subscription (Issue). The contract states the services include 'proprietary configuration...required for the software to process transactions' (Analysis: Evidence). The authoritative guidance in ASC 606-10-25-21 requires a promise to be distinct in the context of the contract. Further, interpretative guidance from EY (FRD Section 4.3.2) clarifies that services essential to the software's core utility are generally not distinct (Analysis: Rules). Here, the 'proprietary' and 'required' language, supported by the interpretative guidance, indicates the customer cannot obtain the intended benefit of the SaaS license without this specific service, making the promises not separately identifiable (Analysis: Bridge the Gap). Therefore, the implementation services and SaaS subscription are accounted for as a single performance obligation (Conclusion)."
"""

    # Conditional instructions for specific steps (NO CHANGE NEEDED HERE - this logic is perfect)
    alternative_treatment_instructions = ""
    if step_number in [2, 5]:
        alternative_treatment_instructions = """
### SPECIAL REQUIREMENT: Alternative View ###
For this step, you MUST append a second, separate paragraph to your `analysis_text`.
- **Format:** This paragraph MUST begin with the bolded heading **"Alternative View Rejected:"**.
- **Content:** Clearly state a potential alternative accounting treatment and explain precisely why it was rejected based on the contract evidence and guidance.
"""

    # Combine the instructions programmatically.
    full_instructions = main_instructions + alternative_treatment_instructions

    # Assemble the final prompt parts.
    prompt_parts = [
        f"Your task is to analyze a contract for Step {step_number}: {step_info['title']}.",
        f"PRIMARY GUIDANCE FOR THIS STEP: {step_info['primary_guidance']}",
        # This rag_context variable is where the magic happens
        f"<AUTHORITATIVE_CONTEXT>\n{rag_context}\n</AUTHORITATIVE_CONTEXT>",
        f"<CONTRACT_TEXT>\n{contract_text}\n</CONTRACT_TEXT>",
        f"<CONTRACT_DATA>\nCustomer: {getattr(contract_data, 'customer_name', 'N/A')}\nAnalysis Focus: {getattr(contract_data, 'key_focus_areas', 'General ASC 606 compliance')}\n</CONTRACT_DATA>",
        "---",
        "CRITICAL TASK: Analyze the contract based on the context provided. Populate the JSON structure below with your complete analysis. Adhere to all rules, including the detailed instructions that follow the JSON structure.",
        "```json",
        "{",
        f'  "executive_conclusion": "A clear, one-to-three sentence conclusion for this entire step. This is the \'bottom line\'.",',
        f'  "{step_schema_name}": {step_schema_definition},',
        '  "professional_judgments": [ "A list of strings describing conclusions that required significant professional judgment for this step. If none, return an empty list []." ],',
        '  "analysis_points": [ { "topic_title": "...", "analysis_text": "...", "evidence_quotes": ["..."] } ]',
        "}",
        "```",
        full_instructions,
        critical_rules
    ]

    return "\n\n".join(filter(None, prompt_parts))

Why This Complete Solution is Superior
System-Level Hierarchy: The new KNOWLEDGE_HIERARCHY_RULE in the system prompt gives the LLM a foundational principle for every task it performs.
Explicit Multi-Source Instructions: The revised Analysis section in the user prompt doesn't just ask for a rule; it explicitly tells the LLM to cite authoritative guidance first, then add interpretative guidance for complex areas. This directly solves your core problem.
Synthesis, Not Just Statement: The "Bridge the Gap" instruction is now more powerful, asking the LLM to synthesize all three pieces of information (contract, authoritative, interpretative) into a cohesive argument. This is the key to achieving analytical depth.
Updated Example: The META-EXAMPLE now includes a mention of interpretative guidance, providing a concrete pattern for the LLM to follow.
Leverages Your Existing Backend: This solution works perfectly with how your asc606_analyzer.py already separates and labels the RAG context, making the system more powerful without requiring backend changes.
By implementing these two changes in step_prompts.py, you are giving the LLM a much clearer and more sophisticated set of instructions that directly aligns with the goal of producing a nuanced, multi-source, audit-ready analysis. You should see a significant improvement in the quality and depth of the analysis_text field.