Part 1: Your Sidebar Question (The Most Important Fix)
You asked: "should i tell replit to stop that and have asc 606 refer to the side bar code in home.py"

This is the perfect question. The answer is: Yes, you should stop that, but we can't make one page "refer to" another's code.

Instead, the solution is to remove the old, manual sidebar code from your ASC 606 page entirely and let Streamlit's modern, automatic navigation do the work.

Your ASC_606_Revenue.py file is using an older method of building navigation with st.button and st.switch_page. This requires you to copy and paste that complex code on every single page. The new, standard way is to let Streamlit build the navigation for you automatically, which is what we've set up for Home.py.

Let's make your ASC 606 page follow the new, simple standard.

Part 2: The Replit Icon Issue
You are right. Many web-based development environments, including Replit, automatically "clean" or "sanitize" filenames to prevent issues. This means they remove special characters like emojis.

This is a limitation of the environment, not of Streamlit.

Recommendation: Since we cannot use icons in the filenames on Replit, the best path forward is to accept this limitation and embrace the clean, text-only navigation that Streamlit provides automatically. The alternative (manually building the sidebar on every page just to get icons) is far too complex and goes against your goal of keeping things simple.

A clean, text-based navigation is professional and standard.

Step-by-Step Plan to Simplify Your ASC_606_Revenue.py Page
Let's apply these ideas. We will remove all the old, non-standard code from your ASC 606 page to make it consistent with your simple Home.py.

Step 1: Delete the Manual Sidebar Code
In your ASC_606_Revenue.py file, find and delete this entire 11-line block:

# DELETE THIS ENTIRE BLOCK
# Simple navigation with sidebar
with st.sidebar:
    st.markdown("### Navigation")

    if st.button("üè† Home", use_container_width=True):
        st.switch_page("Home.py")

    if st.button("üìà ASC 606 Revenue", use_container_width=True, type="primary"):
        pass  # Already on this page

    if st.button("üè¢ ASC 842 Leases", use_container_width=True):
        st.switch_page("pages/2_ASC_842_Leases.py")

Step 2: Add the Consistent Branding Sidebar
Now, add the simple, standard branding sidebar that we designed for Home.py. Place this code right after your st.set_page_config(...) call.

# ADD THIS BLOCK IN ITS PLACE
# --- Sidebar Branding (Consistent with all pages) ---
with st.sidebar:
    st.title("Controller.cpa")
    st.divider()

Step 3: Remove All Custom CSS and Non-Standard Functions
Your ASC 606 page is still calling old, complex helper functions. We need to remove them to make the app truly simple and robust.

Delete the function imports: Find this block and delete the lines for load_custom_css, render_branded_header, and render_standard_sidebar.

Old Code:

from core.ui_helpers import (
    load_custom_css, 
    render_branded_header, 
    render_standard_sidebar,
    render_analysis_metrics,
    render_step_analysis,
    render_professional_memo
)

New Code:

from core.ui_helpers import (
    render_analysis_metrics,
    render_step_analysis,
    render_professional_memo
)

Delete the function call: Find and delete this line:

# DELETE THIS LINE
load_custom_css()

Replace the custom header: Find the custom HTML header block and replace it with a standard st.title.

Old Code:

# DELETE THIS ENTIRE BLOCK
st.markdown("""
<div style="text-align: center; padding: 2rem 0 1rem 0;">
    <h1 style="font-size: 2.2rem; ...">ASC 606 Revenue Recognition Analysis</h1>
    ...
</div>
""", unsafe_allow_html=True)

New Code:

# REPLACE IT WITH THIS
st.title("ASC 606 Revenue Recognition Analysis")

What You Achieve with These Changes
By following these steps, you will have:

A Consistent Sidebar: The navigation and branding will look identical on every page.
A Simpler Codebase: You have removed dozens of lines of complex, non-standard, and manual code.
A More Robust App: Your application no longer depends on fragile CSS hacks and is much less likely to break in the future.
You should apply these same simplifications to your ASC_842_Leases.py file as well to make your entire platform unified.