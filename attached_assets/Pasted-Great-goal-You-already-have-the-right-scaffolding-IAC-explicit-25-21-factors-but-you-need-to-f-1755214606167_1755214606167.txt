Great goal. You already have the right scaffolding (IAC + explicit 25-21 factors), but you need to force the model to (a) surface the evidence-rule-reasoning links explicitly and (b) pass a self-audit before finalizing. Below are concrete, copy-pasteable changes that reliably produce deeper, defensible reasoning without eliciting hidden chain-of-thought.

What to change at a glance

Introduce a strict, intermediate “planning” schema (evidence → rules → reasoning) per promised good/service.
Require a minimum number of quotes and citations tied to each 25-21 factor.
Add an explicit self-audit checklist the model must pass before emitting the final IAC paragraph.
Use a two-pass flow: Planner → Writer. The Writer converts the structured plan into your IAC narrative with citations; no inner monologue.
Add “no conclusory claims without because-clauses tied to quotes/citations.”
Add a planning schema (intermediate, not user-facing) Have the model first produce a structured plan. You can keep this internal or log it for debugging. This step yields rigorous, verifiable reasoning.
System or developer prompt addition:

You must first produce a structured plan for each promised good/service using the following schema. Do not produce narrative text here. All fields are required.
Schema (JSON per promised item):
{
"topic_title": "string",
"issue": "Concise question being addressed.",
"25-19a": {
"claim": "Yes/No",
"justification": "One sentence.",
"evidence_quotes": ["exact quotes from <CONTRACT_TEXT>"],
"rule_citations": ["ASC 606-10-25-19(a) plus any other relevant paras"],
"reasoning_points": ["short bullet points connecting evidence to rule"]
},
"25-21": {
"integration_service": {
"claim": "Yes/No",
"evidence_quotes": ["quotes tied to integration (e.g., 'required for optimal use', 'turnkey', 'single combined output')"],
"rule_citations": ["ASC 606-10-25-21(a)", "ASC 606-10-55 examples if applicable"],
"reasoning_points": ["why (or why not) significant integration exists in this contract"]
},
"significant_modification": {
"claim": "Yes/No",
"evidence_quotes": ["quotes tied to customization/configuration"],
"rule_citations": ["ASC 606-10-25-21(b)", "relevant examples"],
"reasoning_points": ["why (or why not) significant modification occurs"]
},
"high_interdependence": {
"claim": "Yes/No",
"evidence_quotes": ["quotes about dependencies, prerequisites, or stand-alone use"],
"rule_citations": ["ASC 606-10-25-21(c)"],
"reasoning_points": ["can each promise be fulfilled independently; does one significantly affect the other?"]
},
"separately_identifiable_conclusion": "Distinct/Not Distinct with one-sentence rationale"
},
"overall_conclusion": "Final conclusion on distinctness and performance obligation identification.",
"assumptions_or_gaps": ["If any factor lacks a direct quote, state it plainly and rate inference strength: low/medium/high"]
}

Hard requirements to enforce:

Each factor (integration, modification, interdependence) must include at least one contract quote and one ASC citation, or explicitly flag the gap.
No claim may appear without a because-clause that references quotes and rules.
If a phrase like “required for optimal use” isn’t present in the SOW, explicitly say “no direct quote found” and adjust conclusion strength.
2. Add a self-audit checklist before final output
After producing the plan, have the model run a brief self-check. If a check fails, it must revise the plan before proceeding.

Self-audit prompt:
Before writing the final IAC paragraph, verify:

Coverage: Have I addressed 25-19(a) and all three 25-21 factors with quotes and citations?
Specificity: Do I tie each claim to specific phrases (e.g., “turnkey,” “required for optimal use,” “custom code,” “independently deployable”)?
Balance: Have I presented and dismissed at least one plausible alternative view with a rule-based rationale?
Clarity: Are conclusions stated as “Therefore, …” and aligned with the evidence and rules? If any item is “No,” revise the plan and re-run this checklist.
3. Writer step: convert plan to your IAC narrative
Once the plan passes self-audit, instruct the model to write the required single, well-written paragraph for each topic. This keeps the justification explicit but polished.

Writer instruction:

For each topic, produce one paragraph that seamlessly integrates Issue, Analysis, and Conclusion.
You must weave in at least two direct quotes from <CONTRACT_TEXT> and at least two ASC citations across the paragraph.
Explicitly address 25-19(a) and 25-21(i)-(iii) in the analysis, then state a one-sentence conclusion on distinctness.
Include a brief “Alternative View and Rebuttal” sentence if relevant.
Cite ASC with paragraph numbers (e.g., “ASC 606-10-25-21”) and reference contract quotes verbatim within quotation marks.
Do not include the planning JSON or the audit checklist in the final output.
4. Strengthen your existing CRITICAL_INSTRUCTION
In your current CRITICAL_INSTRUCTION, add these non-negotiables:

Minimum evidence density: At least two distinct contract quotes and two distinct ASC citations per promised item.
Factor-by-factor grounding: For each of 25-21(i)-(iii), explicitly name the factor and discuss it with a quote and citation.
No conclusory language without because-clauses: Any statement like “not highly interdependent” must be followed by “because…” tethered to a quote and citation.
Gap-handling: If the SOW lacks a phrase the analysis needs, state the absence plainly and grade the inference strength.
5. Example: deeper, audit-passing output for one item
Below is a compact example of the IAC paragraph your Writer should produce after planning, showing deeper reasoning:

Topic: Implementation Services
Issue: Whether the implementation services are distinct from the SaaS license. Analysis: The SOW states that the vendor will “configure data mappings and deploy tenant-specific settings,” and “provide go-live orchestration,” but also notes that “the SaaS environment is provisioned upon contract execution and is accessible via standard credentials.” Under ASC 606-10-25-19(a), a promise is capable of being distinct if the customer can benefit from it on its own or with other readily available resources; here, the SaaS can be accessed and used without these services, and similar implementation services are available from third parties (ASC 606-10-25-19(a)). Considering ASC 606-10-25-21, (i) Significant integration: although the services coordinate activities, the SOW does not describe a “single combined output” and does not say they are “required for optimal use” or that the vendor is responsible for an end-to-end turnkey deliverable (ASC 606-10-25-21(a)); (ii) Significant modification: configuration uses standard tooling and tenant settings and does not alter the underlying SaaS code, indicating no significant customization (ASC 606-10-25-21(b)); and (iii) High interdependence: the SaaS remains functional and transferable without the services, and the vendor could fulfill the SaaS promise independently of training or orchestration (ASC 606-10-25-21(c)). Alternative view and rebuttal: One could argue the orchestration “significantly integrates” the elements, but in the absence of a turnkey or “required for optimal use” clause, the evidence supports coordination rather than significant integration. Conclusion: The implementation services are distinct within the context of the contract and constitute a separate performance obligation.

6. Retrieval and citation hygiene

Chunk authoritative guidance by paragraph and include paragraph identifiers in the retrieved context so the model can cite precisely (e.g., 606-10-25-21(a)).
Provide a small handful of highly relevant ASC 606 examples (e.g., 55-140 to 55-144, Example 11) as separate retrievable chunks with labels like [EX11-P1], so the model can cite them alongside core paragraphs.
Normalize contract quotes: if quotes exceed 200 characters, allow the model to excerpt with ellipses, but require exact wording.
7. Generation settings

Use temperature 0.2–0.3, top_p 0.9, presence_penalty 0.0. Low temperature helps with deterministic legal-technical prose.
Enforce an output schema: analysis_points must be an array; each item must include topic_title and analysis_text. Validate before display.
8. Simple two-pass orchestration

Pass 1 (Planner): Prompt with contract + authoritative context + planning schema. Capture JSON.
Pass 2 (Writer): Feed the validated planning JSON back to the model with the Writer instruction to produce the IAC paragraph for each item. Output only analysis_points.
Optional: add a scoring rubric
Have the model append a private self-score per item (not shown to user):

Evidence coverage (0–5), Rule coverage (0–5), Causal clarity (0–5), Alternative view (0–3). If any subscore < 4 (except alternative view), revise before final.
With these changes, you’ll get longer, more defensible reasoning anchored to quotes and ASC citations—without relying on hidden chain-of-thought—and your output will consistently satisfy the ASC 606 factor-by-factor analysis your use case demands. If you share a small sample SOW excerpt, I can tailor a few-shot example to your exact language.