
Here’s a focused review of login.html with messaging, UX, security, and consistency fixes. I include ready-to-paste copy and small code changes.

Overall verdict

Clean and functional, but a few changes will improve trust, reduce confusion about “legacy” login, and align with sitewide standards. Also tighten security (avoid user enumeration), improve autofill/accessibility, and standardize CTAs/emails.
Head/SEO

Add noindex to keep auth pages out of search.
Align previews with other pages.
Consider using the same font family as your marketing pages (Poppins) for visual consistency.
Suggested tags to add/replace in <head>:

<meta name="robots" content="noindex, nofollow">
<link rel="canonical" href="https://veritaslogic.ai/login.html">
<meta property="og:title" content="Sign In — VeritasLogic.ai">
<meta property="og:description" content="Sign in to access your technical accounting analysis tools and dashboard.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://veritaslogic.ai/login.html">
<meta name="twitter:card" content="summary">
Optional: switch Inter to Poppins to match marketing pages.
Navigation

Standardize CTA label and link:
Change the nav CTA from “Sign Up” to “Start Risk Free” and link to contact.html#contact-form.
Ensure mobile menu toggle works (script is present, good).
Login form copy and structure

Headline/subcopy are fine. Consider adding one clarity line:
“Use your business email and password to sign in.”
Remove “legacy” phrasing; it reads confusing for enterprise users. If you’re moving to passwords for everyone:
Replace the small note with: “Previously used email-only login? You can set a password now on the reset page.”
Link to forgot-password.html.
Accessibility and autofill:
Add aria-live to the message container and autofocus the email input (you already focus email—keep it).
Email input: autocomplete="email" inputmode="email"
Password input: autocomplete="current-password"
Security and error messaging (avoid user enumeration)

Don’t reveal whether a user exists (“User not found”). Use a generic error for invalid credentials.
If you want to keep the verify-email flow, still avoid confirming existence:
“Please check your email for a verification link.”
Button/UX

Disable the button after success and show a “Redirecting…” label to prevent double submits.
Optional: Add a “Show password” toggle and Caps Lock detection for fewer failed attempts.
Footer

Update year to 2025.
If social links are placeholders, remove or add real URLs.
Ready-to-paste copy changes

Replace the “legacy” note under password
<small>If you previously used email-only login, you can set a password on the <a href="forgot-password.html">reset page</a>.</small>
Add accessibility to message container
Change <div id="messageContainer"></div> to:
<div id="messageContainer" aria-live="polite" role="status"></div>
Improve inputs (autofill/accessibility)
Email input:
<input type="email" id="email" name="email" required placeholder="john@company.com" autocomplete="email" inputmode="email" autofocus>
Password input:
<input type="password" id="password" name="password" placeholder="Enter your password" autocomplete="current-password">
Standardize nav CTA
Replace:
<a href="signup.html" class="nav-cta">Sign Up</a>
With:
<a href="contact.html#contact-form" class="nav-cta">Start Risk Free</a>
Footer year
Update © 2024 to © 2025.
“Contact support” link
Ensure it points to the unified form:
<a href="contact.html#contact-form">Contact support</a>
JavaScript fixes (prevent user enumeration + UX polish)

A) Generic error messaging Replace this block:

} else { if (result.error === 'Please verify your email first') { showMessage('Please verify your email address first. Check your inbox for the verification link.', 'error'); } else if (result.error === 'User not found') { showMessage('Email not found. <a href="signup.html">Create an account</a> to get started.', 'error'); } else { showMessage(result.error || 'Login failed. Please try again.', 'error'); } }
With this more secure, generic approach:

} else { // Use generic message to avoid revealing whether an account exists if (result.error && result.error.toLowerCase().includes('verify')) { showMessage('Please check your email for a verification link.', 'error'); } else { showMessage('Invalid email or password. Please try again.', 'error'); } }
B) Success UX After success, disable the button and show a clearer label before redirect:

if (response.ok) { localStorage.setItem('authToken', result.token); localStorage.setItem('userData', JSON.stringify(result.user)); submitButton.disabled = true; submitButton.textContent = 'Redirecting...'; showMessage('Login successful! Redirecting to dashboard...', 'success'); setTimeout(() => { window.location.href = 'dashboard.html'; }, 1000); }
C) Add aria-live-compatible showMessage (keep your function; it’s fine). Consider also focusing the container:

function showMessage(message, type) { const container = document.getElementById('messageContainer'); container.innerHTML = <div class="${type}-message">${message}</div>; container.focus?.(); container.scrollIntoView({ behavior: 'smooth', block: 'nearest' }); }
Optional enhancements

Add “Show password” toggle:
A small checkbox or icon toggling input type between password/text.
Add Caps Lock detection:
password.addEventListener('keyup', (e) => { if (e.getModifierState && e.getModifierState('CapsLock')) { /* show hint */ } });
Final checklist

Add noindex, canonical, and OG/Twitter tags.
Standardize nav CTA to “Start Risk Free” → contact.html#contact-form.
Remove “legacy” phrasing; direct old users to set a password via forgot-password.html.
Use generic error messages to avoid user enumeration.
Add aria-live and autocomplete attributes.
Update footer year to 2025.