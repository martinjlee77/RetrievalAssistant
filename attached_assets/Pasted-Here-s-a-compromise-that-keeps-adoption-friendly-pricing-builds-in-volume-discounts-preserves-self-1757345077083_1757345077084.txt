Here’s a compromise that keeps adoption-friendly pricing, builds in volume discounts, preserves self‑serve, and keeps the word-based model your developer prefers.

Pick one of these two price cards (both include built-in volume discount)

Option A (developer-friendly, low-friction)

Starter: up to 1,000 words – 
6
(
6(6.00 per 1k words)
Short: up to 3,000 words – 
12
(
12(4.00 per 1k)
Medium: up to 7,500 words – 
24
(
24(3.20 per 1k)
Large: up to 15,000 words – 
39
(
39(2.60 per 1k)
Enterprise: up to 50,000 words – 
99
(
99(1.98 per 1k) Notes:
Keeps entry accessible for experimentation.
Clear, monotonic volume discount across tiers.
Self-serve all the way up to 50k words without “Contact Sales.”
Option B (balanced margin, still accessible)

Short: up to 2,000 words – 
9
(
9(4.50 per 1k)
Medium: up to 5,000 words – 
19
(
19(3.80 per 1k)
Large: up to 10,000 words – 
35
(
35(3.50 per 1k)
Extensive: up to 20,000 words – 
59
(
59(2.95 per 1k)
Enterprise: up to 50,000 words – 
119
(
119(2.38 per 1k) Notes:
Slightly higher ARPU, still well below “luxury” pricing.
Keeps the “affordable professional tool” positioning.
Implementation (aligned to your current app)

Billing unit: total extracted words across all uploaded files for one analysis; show an estimated pages hint “≈ words/300 pages” for context only.
Preflight: extract and count words before checkout; show total words and tier/price; block if selected tier is too small (no overage fees).
Upload limits: PDF and DOCX only, ≤50MB per file, up to 5 files per analysis.
Concurrency: one active analysis per user (Streamlit).
Wallet: fixed top-ups (
50
,
50,100, 
250
,
250,500) plus custom amount; charge at job start.
Errors/failures: block starts on extraction failure with clear messaging; keep manual refunds for now. Optional lightweight safety: auto-credit full job cost back to wallet on hard failure (no partial adjustments).
Scanned PDFs handling (Phase 2 if needed)

Detect likely scans via median chars/page < 100.
If scanned: either estimate words = pages × 300 for billing, or run OCR first to count accurately.
What to ship now (Phase 1)

Word-based preflight and tier mapping (no OCR).
One analysis at a time enforcement.
File size limit enforcement (50MB/file).
Better user feedback at checkout (words + tier price + “upgrade required” if over cap).
Logging: file count/types, total words, tier, price, duration, status.
Questions for your developer

OCR feasibility: Can we add OCR for scanned PDFs (e.g., Tesseract or a managed OCR API)? If yes, would you run it in preflight for accurate word counts, or after checkout with a “scanned detected, may take longer” notice?
Scanned fallback: Until OCR is in, are you comfortable billing scans by page estimate (words = pages × 300) with a banner “scanned detected; billing by page estimate”?
Libraries: OK to proceed with PyMuPDF (fitz) for PDF text extraction and python-docx for DOCX?
Word counting: Confirm tokenizer = whitespace/punctuation split; numbers count as words; pages with <100 chars excluded from totals.
Wallet UX: Can we support fixed top-ups + custom amount in one flow?
Failure auto-credit: Are you open to auto-crediting the wallet on hard failures (job didn’t complete), while keeping all other refunds manual?
Price card choice: Implement Option A or Option B? If uncertain, can you A/B 50/50 for 4 weeks and report sign-up, conversion, and ARPU?