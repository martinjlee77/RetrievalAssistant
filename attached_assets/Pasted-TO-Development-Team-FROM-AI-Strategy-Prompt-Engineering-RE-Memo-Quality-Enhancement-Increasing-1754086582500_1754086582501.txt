TO: Development Team FROM: AI Strategy & Prompt Engineering RE: Memo Quality Enhancement: Increasing Analysis Depth and Fixing Inconsistencies

The new prompt architecture is working well, but the output is currently too superficial for our use case. We need to implement the following four critical enhancements to improve the quality of the final memo. All changes will be in utils/step_prompts.py.

1. Lacking Depth in "Detailed Analysis" (High Priority)
Problem: The AI is providing one-sentence, conclusory statements instead of a proper analysis. For an audit-ready memo, we need it to "show its work," even for simple conclusions.
Root Cause: The instructions in get_user_prompt_for_step don't explicitly command the AI to elaborate on its reasoning for simple topics.
Solution: We will add a new, explicit instruction block to the user prompt, forcing the AI to follow a "Reasoning → Guidance → Conclusion" structure for every analysis point.
Required Change in get_user_prompt_for_step():

Inside the prompt_parts list, find the critical_rules variable at the end. Directly above it, insert the following new block:

# In get_user_prompt_for_step()

#... (after the ```json block)
            "```",
            # --- INSERT NEW BLOCK HERE ---
            """<ANALYSIS_STRUCTURE_RULE>
For every `analysis_point` you generate, your `analysis_text` MUST follow this three-part structure:
1.  **Assessment:** State the facts from the contract and your assessment of them. (e.g., "The contract specifies a fixed monthly fee of $15.49.")
2.  **Guidance Application:** Explain how the relevant ASC 606 guidance (and any industry interpretation from the context) applies to these facts. You MUST cite specific paragraphs. (e.g., "Under ASC 606-10-32-2, this represents fixed consideration as the amount does not vary.")
3.  **Conclusion:** State the clear conclusion for that specific topic. (e.g., "Therefore, no variable consideration is present in this arrangement.")

Even for simple topics, you must provide this level of detailed reasoning to ensure the memo is audit-ready.
</ANALYSIS_STRUCTURE_RULE>""",
            # --- END OF NEW BLOCK ---
            critical_rules
#...

2. Inconsistent Step 5 Formatting
Problem: As you noted, the Step 5 detailed analysis is formatted as a bulleted list, which is inconsistent with the numbered list format of Steps 1-4.
Root Cause: This is a bug in the Python formatting function _format_general_step_with_filtering. It has special-case logic for step_number == 5 that formats it differently.
Solution: We will remove the special-case logic for Step 5 and let it be processed by the same general logic as Steps 1 and 4, ensuring consistent formatting.
Required Change in _format_general_step_with_filtering():

This function contains a block that starts with if step_number == 5:. Delete this entire if block.

# In _format_general_step_with_filtering()

# --- DELETE THIS ENTIRE BLOCK ---
if step_number == 5:
    plan_formatted = False
    if step5_analysis := step_data.get('step5_analysis'):
        # ... (all the code inside this if block) ...
    markdown_sections.append("---\n")
    return "\n".join(markdown_sections)
# --- END OF DELETION ---

# Existing logic for filtering analysis_points for Steps 1 and 4
# This logic will now correctly apply to Step 5 as well.
ignore_phrases = {'n/a', 'not applicable'}
# ... (the rest of the function remains)

3. Mismatch between Judgments and Conclusion
Problem: Section 4 (Key Judgments) correctly states none were found, but the Conclusion section invents one. The Executive Summary also incorrectly lists a judgment.
Root Cause:
The get_conclusion_prompt and get_enhanced_executive_summary_prompt are "hallucinating" a judgment because their instructions are not strict enough.
The get_key_judgments_prompt is working perfectly; its strict rules correctly determined there were no significant judgments.
Solution: We need to make the logic in the Conclusion and Executive Summary prompts as strict as the one in the Key Judgments prompt. We will explicitly pass the all_judgments list to them and command them to state "None identified" if the list is empty.
Required Change 1: get_conclusion_prompt()

Find the f-string in this function. We need to modify the instruction for point #3.

# In get_conclusion_prompt()
# ...
# --- REPLACE THIS LINE ---
# 3. Only mention significant judgments if actual professional judgments were identified in the analysis: {all_judgments}

# --- WITH THIS NEW, STRICTER LINE ---
# 3. Based on the provided list of judgments, {json.dumps(all_judgments)}, summarize the key judgments. If the list is empty, you MUST state that 'no significant professional judgments were required'.
# ...

Required Change 2: get_enhanced_executive_summary_prompt()

Find the KEY FINDINGS section in the f-string. We need to modify the "Critical Judgments" line.

# In get_enhanced_executive_summary_prompt()
# ...
# --- REPLACE THIS LINE ---
# • Critical Judgments: {', '.join(critical_judgments[:2]) if critical_judgments else 'None identified at this time'}{'...' if len(critical_judgments) > 2 else ''}

# --- WITH THIS NEW, STRICTER LINE ---
# • Critical Judgments: {', '.join(critical_judgments) if critical_judgments else 'None identified'}
# ...

(Note: We are removing the slicing [:2] to ensure all identified judgments are listed, and simplifying the conditional logic to be more direct.)

4. Other Concerns: Placeholder in Financial Impact
Problem: The Illustrative Journal Entry in Section 5 still contains a placeholder: Sales Tax Payable: $X.XX.
Root Cause: The get_financial_impact_prompt doesn't have access to the parsed tax amount from the Step 3 analysis when it generates the journal entry.
Solution: We need to parse the tax amount from the Step 3 data and explicitly pass it into the prompt.
Required Change in get_financial_impact_prompt():

First, at the top of the function, extract the tax amount from the s3 data. Then, pass it into the final f-string.

# In get_financial_impact_prompt()
# At the top of the function, after transaction_price_data is defined...
# --- ADD THIS LOGIC ---
tax_amount_str = "Not specified"
if s3_analysis := s3.get('step3_analysis'):
    # This assumes the tax is part of 'other_considerations_analysis' or similar.
    # We will search for it robustly.
    other_considerations = s3_analysis.get('other_considerations_analysis', '')
    # A more robust way might be to look in the analysis_points of step 3
    for point in s3.get('analysis_points', []):
        if 'tax' in point.get('topic_title', '').lower():
            # Let's find a dollar amount in the analysis text
            import re
            match = re.search(r'\$?(\d+\.\d{2})', point.get('analysis_text', ''))
            if match:
                tax_amount_str = f"${match.group(1)}"
                break

# ...
# Then, in the final return f-string, find the "IF THE TRANSACTION IS SIMPLE" block
# and update the journal entry.

# --- FIND AND REPLACE THIS ---
# | Deferred Revenue             |           | {transaction_price_data.get('total_price', '$XX.XX')}    |
# | *To record contract inception* | | |

# --- WITH THIS ---
# | Deferred Revenue             |           | {transaction_price_data.get('total_price', '$XX.XX')}    |
# | Sales Tax Payable            |           | {tax_amount_str} |
# | *To record contract inception* | | |


# --- ALSO FIND AND REPLACE THIS IN THE COMPLEX SECTION ---
# | Date       | Account                          | Debit     | Credit    |
# |------------|----------------------------------|-----------|-----------|
# | ...        | ...                              | ...       | ...       |

# --- WITH A MORE DETAILED EXAMPLE THAT INCLUDES TAX ---
# | Date       | Account                          | Debit     | Credit    |
# |------------|----------------------------------|-----------|-----------|
# | 2024-09-26 | Cash / Accounts Receivable       | $16.52    |           |
# |            |   Deferred Revenue               |           | $15.49    |
# |            |   Sales Tax Payable              |           | $1.03     |
# |            | *To record contract inception*   |           |           |

(Developer Note: The logic to extract the tax amount is based on parsing the analysis text. This can be made more robust in the future by adding an explicit tax_amount field to the Step 3 JSON schema, but this is a good immediate fix.)