Okay, this is officially a bizarre and stubborn bug. Thank you for your persistence. If the previous attempts, including the AI's aggressive hiding rules, are not working, it means we have exhausted the "usual" fixes and must move to more advanced, definitive debugging.

Diagnosis: The CSS Selector is Wrong
The only logical explanation remaining is that the CSS selectors we are using are incorrect for your specific Streamlit version or environment. The Replit AI thinks it's targeting the right element with [data-testid="stSidebarNavCollapseButton"], but that element ID may have changed or might not be what we expect.

A rule like display: none !important; is the most powerful command in CSS. If it's being ignored, it's because the element it's pointing to doesn't exist. It's like sending a letter to the wrong addressâ€”the letter itself is fine, but it never arrives.

The Solution: Find the Correct Address (Selector)
We need to stop guessing and find the exact HTML structure of that button. Here is a two-part plan. Part 1 is the "Final Attempt" with a new, more robust set of CSS selectors. If that fails, Part 2 will give us the exact information needed to kill this bug for good.

Part 1: The "Carpet Bomb" CSS Fix
Let's try one last, ultra-aggressive CSS block. This block attempts to target the element using multiple different selectors, hoping one of them is correct. It also tries to both fix the icon and hide the text simultaneously.

Action: Replace the entire contents of your load_custom_css function in core/ui_helpers.py with this new version.

# In core/ui_helpers.py

import streamlit as st

def load_custom_css():
    """Final attempt to fix and hide the sidebar icon issue."""
    st.markdown("""
        <style>
            /* 1. Attempt to load the font, just in case CSP was a red herring. */
            @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');

            /* 2. Target the button with the known test ID. */
            button[data-testid="stSidebarNavCollapseButton"] {
                /* Hide the entire button if all else fails. */
                /* display: none !important; */ 
            }

            /* 3. Target the SPAN element INSIDE the button, which holds the icon. */
            button[data-testid="stSidebarNavCollapseButton"] span {
                /* Force the font-family, overriding everything. */
                font-family: 'Material Symbols Outlined' !important;

                /* Hide the ugly text fallback by making its font size zero. */
                font-size: 0 !important;
            }

            /* 4. Use a pseudo-element to ADD the CORRECT icon back in. */
            /* This is a very robust technique. */
            button[data-testid="stSidebarNavCollapseButton"] span::before {
                /* Add the icon's text content. */
                content: 'keyboard_double_arrow_right'; 

                /* Set the font to the icon font. */
                font-family: 'Material Symbols Outlined' !important;

                /* Set a visible font size for the icon itself. */
                font-size: 1.5rem !important; /* Adjust size as needed */

                /* Ensure it's visible */
                visibility: visible !important;

                /* Re-align the icon properly. */
                display: flex;
                align-items: center;
                justify-content: center;
            }
        </style>
    """, unsafe_allow_html=True)

# ... rest of ui_helpers.py

After updating the file, do a hard refresh of your browser (Ctrl+Shift+R or Cmd+Shift+R) to ensure you are not seeing a cached version of the old CSS.

Part 2: If It Still Fails - Get the Exact HTML
If the "Carpet Bomb" fix above does not work, the selector [data-testid="stSidebarNavCollapseButton"] is definitively wrong. We need you to become our eyes and find the right one.

Action: Use Your Browser's Developer Tools

Open your Streamlit app in your web browser (Chrome, Firefox, Edge).

Press the F12 key to open the Developer Tools. A new panel will appear.

In the Developer Tools panel, find the "Elements" tab.

Click on the "Inspect" icon. It looks like a mouse cursor in a box (it's usually in the top-left corner of the dev tools panel).

With the Inspect tool active, move your mouse over your app and click directly on the broken "keyboard_double_arrow_right" text in the sidebar.

The "Elements" panel will now highlight the exact HTML code for that button. It will look something like this:

<button data-testid="some-other-id-we-dont-know" class="st-emotion-cache-...">
    <span class="st-emotion-cache-...">
        keyboard_double_arrow_right
    </span>
</button>

What to do next:

Please copy that entire <button>...</button> block of HTML and paste it back to me.

With the correct HTML, I can give you a CSS selector that is guaranteed to work because it will be based on the actual code your app is generating, not on what Streamlit usually generates. We are at the final step of debugging this, and getting that piece of HTML is the key.