Excellent. You have a very solid foundation here. The current prompt is well-structured for a RAG system, but it's designed for a world where the AI does all the inference. We'll upgrade it to the "Trust, but Verify" model we discussed.

Here is a comprehensive set of instructions and the revised prompt. This is designed to be clear and actionable for implementation in your Replit environment.

Comprehensive Instructions for Replit Implementation
Objective:
Upgrade the SimpleASC606Analyzer to incorporate detailed user inputs and perform a "Trust, but Verify" analysis. The AI will validate the user's preliminary assessment against the contract documents, report any discrepancies with evidence, and generate a final memo based on its validated conclusions.

Step 1: Update the analyze_contract Method Signature
The contract_data dictionary passed to your analyzer needs to contain the new structured inputs. Modify the analyze_contract method in simple_asc606_analyzer.py to reflect this. The new Pydantic models you'll create in your main app will produce this structure.

Location: simple_asc606_analyzer.py Method: analyze_contract

The signature will remain analyze_contract(self, contract_text: str, contract_data: Dict[str, Any]), but you need to be aware that the contract_data dictionary will now have a much richer structure, like this:

# Example of the new contract_data structure
{
    "analysis_title": "Q4 Project Phoenix SOW",
    "customer_name": "ABC Corp",
    # ... other basic fields ...
    "is_modification": False,
    "performance_obligations": [
        {"name": "Annual Software Subscription", "type": "License", "timing": "Over Time", "ssp": 100000.0},
        {"name": "Implementation Service", "type": "Service", "timing": "Point in Time", "ssp": 20000.0}
    ],
    "fixed_consideration": 110000.0,
    "variable_consideration": {
        "type": "Performance Bonus",
        "estimated_amount": 10000.0
    },
    # ... etc. ...
}

Step 2: Replace the Main Analysis Prompt
This is the most critical change. You will replace the entire analysis_prompt string inside the analyze_contract method with the new, more sophisticated version below. This new prompt explicitly instructs the AI on how to perform the reconciliation.

Location: simple_asc606_analyzer.py Method: analyze_contract

Copy and paste the new prompt provided in the "Revised LLM Prompt" section below.

Step 3: Modify the JSON Output Structure
The new prompt requests a different JSON structure from the LLM. It will now include a reconciliation_analysis section. You must update the code that parses this response to handle the new format.

Location: simple_asc606_analyzer.py Method: _structure_analysis_result

Your ASC606Analysis dataclass needs to be updated to hold this new information.

# In simple_asc606_analyzer.py

@dataclass
class ASC606Analysis:
    """Structure for ASC 606 analysis results"""
    # NEW: Add reconciliation analysis
    reconciliation_analysis: Dict[str, List[Dict[str, Any]]] 

    contract_overview: Dict[str, Any]
    step1_contract_identification: Dict[str, Any]
    step2_performance_obligations: Dict[str, Any]
    # ... rest of the steps ...
    professional_memo: str
    # ... other fields ...

# Update the _structure_analysis_result method
def _structure_analysis_result(self, analysis_result: Dict[str, Any], memo: str) -> ASC606Analysis:
    """Structure the analysis result"""
    structured_analysis = ASC606Analysis(
        # NEW: extract the reconciliation part
        reconciliation_analysis=analysis_result.get('reconciliation_analysis', {'confirmations': [], 'discrepancies': []}),

        contract_overview=analysis_result.get('contract_overview', {}),
        step1_contract_identification=analysis_result.get('step1_contract_identification', {}),
        # ... map the rest of the fields ...
        professional_memo=memo,
        # ...
    )
    # ...
    return structured_analysis

Step 4: Update the Professional Memo Generation
The prompt for generating the memo should now use the AI's validated conclusions, not the raw JSON.

Location: simple_asc606_analyzer.py Method: _generate_professional_memo

The prompt should now reference the validated analysis sections.

# In _generate_professional_memo method
def _generate_professional_memo(self, analysis_result: Dict[str, Any], contract_data: Dict[str, Any]) -> str:
    # We now pass the validated analysis, not the whole raw blob
    validated_analysis = {
        "step1": analysis_result.get('step1_contract_identification'),
        "step2": analysis_result.get('step2_performance_obligations'),
        "step3": analysis_result.get('step3_transaction_price'),
        "step4": analysis_result.get('step4_price_allocation'),
        "step5": analysis_result.get('step5_revenue_recognition')
    }

    memo_prompt = f"""
    Create a professional accounting memo based on the following validated ASC 606 analysis. The analysis has already reconciled user inputs with the contract text, so this data represents the final conclusions.

    MEMORANDUM
    TO: Accounting Department
    FROM: AI-Powered ASC 606 Advisor
    DATE: {datetime.now().strftime('%B %d, %Y')}
    RE: ASC 606 Analysis for {contract_data.get('analysis_title', 'Contract Analysis')}

    VALIDATED ANALYSIS DATA: 
    {json.dumps(validated_analysis, indent=2)}

    TASK:
    Write a clear, professional memo. Start with an executive summary, then detail the analysis for each of the five steps, and conclude with key judgments and implementation guidance. Do not mention the reconciliation process itself; just present the final, correct analysis.
    """
    # ... rest of the method is the same

Revised LLM Prompt (analysis_prompt)
[COPY AND PASTE THIS ENTIRE BLOCK INTO YOUR analyze_contract METHOD]

analysis_prompt = f"""
You are a "Big 4" accounting advisor with deep expertise in ASC 606. Your primary task is to perform a "Trust, but Verify" analysis. You will compare the user's preliminary assessment with the contract documents, identify any discrepancies, and produce a final, evidence-based analysis.

**SOURCE HIERARCHY (in order of authority):**
1.  **CONTRACT TEXT:** The provided contract document(s) are the ultimate source of truth for this specific arrangement.
2.  **AUTHORITATIVE GUIDANCE:** ASC 606 official FASB standards.
3.  **INTERPRETATIVE GUIDANCE:** Big 4 professional guidance (e.g., EY).
4.  **USER PRELIMINARY ASSESSMENT:** A hypothesis to be tested, not a fact.

---

**USER'S PRELIMINARY ASSESSMENT (HYPOTHESIS):**
```json
{json.dumps(contract_data, indent=2, default=str)}

CONTRACT DOCUMENT TEXT:

{contract_text[:15000]}

RELEVANT AUTHORITATIVE & INTERPRETATIVE GUIDANCE: (You have been provided with key excerpts from ASC 606 and EY publications. Use them to support your reasoning.)

YOUR MANDATORY INSTRUCTIONS:

1. VALIDATE THE HYPOTHESIS:

Performance Obligations: Does the contract text support the number, nature, and timing of the POs identified by the user? Are there promises in the contract the user missed? Is the user's "distinctness" assessment correct?
Contract Modification: Does the text contain language about amendments, addendums, or changes that contradict the user's "is_modification" flag?
Transaction Price: Does the contract's pricing structure match the user's breakdown of fixed vs. variable consideration? Is there evidence of a financing component the user missed?
2. GENERATE A RECONCILIATION ANALYSIS:

For each major judgment area (e.g., Performance Obligations), determine if you Confirm or Challenge the user's input.
If you Challenge, you MUST create a "discrepancy" entry. Each discrepancy must include:
area: The part of the analysis being challenged (e.g., "Performance Obligations").
user_input: What the user provided.
ai_recommendation: Your evidence-based conclusion.
rationale: A clear explanation of why your conclusion is correct, referencing ASC 606 concepts (e.g., "The implementation service is distinct because the customer can benefit from it on its own...").
supporting_quote: A direct quote from the contract text that proves your point. This is non-negotiable.
3. PRODUCE THE FINAL VALIDATED ANALYSIS:

After the reconciliation, construct the final five-step analysis based on YOUR validated conclusions. If you challenged the user, your final analysis must reflect your recommendation, not the user's original input.
4. STRICT JSON OUTPUT:

Provide your entire response in a single, valid JSON object. Do not include any text outside the JSON structure.
JSON OUTPUT STRUCTURE:

{{
    "reconciliation_analysis": {{
        "confirmations": [
            {{
                "area": "string (e.g., Transaction Price)",
                "detail": "string (e.g., The fixed consideration amount of $110,000 was confirmed.)"
            }}
        ],
        "discrepancies": [
            {{
                "area": "Performance Obligations",
                "user_input": "User identified one PO: 'SaaS Platform & Implementation'",
                "ai_recommendation": "Identified two distinct POs: 1. Software Subscription (Over Time), 2. Implementation Service (Point in Time).",
                "rationale": "The contract separates the delivery and payment for the subscription and the one-time service. Per ASC 606-10-25-19, these are distinct as the customer can benefit from each on its own and they are separately identifiable in the contract.",
                "supporting_quote": "Section 3.1 states 'The total fee for the Implementation Service is $20,000, due upon completion.' and Section 4.1 states 'The Annual Subscription Fee is $100,000, payable annually.'"
            }}
        ]
    }},
    "contract_overview": {{
        "nature_of_arrangement": "string",
        "key_terms": ["list"],
        "complexity_assessment": "string"
    }},
    "step1_contract_identification": {{
        "contract_exists": true,
        "rationale": "string",
        "key_findings": ["list"],
        "source_basis": "authoritative|interpretative|general_knowledge"
    }},
    "step2_performance_obligations": {{
        "identified_obligations": ["list reflecting AI's final conclusion"],
        "distinctness_analysis": "string reflecting AI's final conclusion",
        "key_judgments": ["list"],
        "source_basis": "authoritative|interpretative|general_knowledge"
    }},
    "step3_transaction_price": {{
        "fixed_consideration": "number",
        "variable_consideration": "string",
        "key_estimates": ["list"],
        "source_basis": "authoritative|interpretative|general_knowledge"
    }},
    "step4_price_allocation": {{
        "allocation_method": "Relative SSP Method",
        "allocation_table": {{ "PO Name 1": "price", "PO Name 2": "price" }},
        "key_assumptions": ["list, including SSP rationale"],
        "source_basis": "authoritative|interpretative|general_knowledge"
    }},
    "step5_revenue_recognition": {{
        "recognition_pattern_by_po": {{ "PO Name 1": "pattern", "PO Name 2": "pattern" }},
        "implementation_steps": ["list"],
        "source_basis": "authoritative|interpretative|general_knowledge"
    }},
    "citations": ["list of specific ASC paragraphs and EY publication sections cited"],
    "source_transparency": {{
        "authoritative_sources_used": ["list"],
        "interpretative_sources_used": ["list"],
        "general_knowledge_areas": ["list"]
    }}
}}

"""