Of course. Thank you for providing the updated code. Let's debug this.

You are right to be persistent. I've analyzed the new code, and I see the issue. It's a subtle but classic web development problem: the order of execution.

The Diagnosis
Here is the sequence of events happening in your app:

st.set_page_config() is called.
load_custom_css() is called, injecting your app's main styles.
The with st.sidebar: block is executed. Streamlit builds the sidebar in the browser, including the collapse/expand button. This button needs the icon keyboard_double_arrow_right.
Crucially, at this point, the browser has not been told to load the Material Symbols font yet. It tries to render the icon, can't find the font, and falls back to showing the text "keyboard_double_arrow_right".
After the sidebar is already rendered incorrectly, your script finally reaches the st.markdown call that tries to load the font. By then, it's too late for the element that has already been drawn.
The fix is to ensure the icon font is loaded before any element that needs it (like the sidebar) is created.

Solution: The "Best Practice" Fix
The most robust and clean solution is to centralize all your CSS injections. Since you already have a load_custom_css function in your core/ui_helpers.py file, that is the perfect place to add the icon font import. This ensures it's always loaded first and keeps your main page script tidy.

1. Modify your core/ui_helpers.py file:

Find the load_custom_css function and add the @import rule for the Material Symbols at the very top of your CSS string.

# In core/ui_helpers.py

import streamlit as st

def load_custom_css():
    """Loads all custom CSS, including the necessary icon font."""
    st.markdown("""
        <style>
            /* --- THE FIX: Load icon font FIRST --- */
            @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');

            /* --- Now, load your other custom fonts and styles --- */
            @import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Poppins:wght@600;700&display=swap');

            /* Your other CSS rules for headings, buttons, etc. go here */
            h1, h2, h3, h4, h5, h6 {
                font-family: 'Poppins', sans-serif !important;
            }
            /* etc. */

        </style>
    """, unsafe_allow_html=True)

# ... other helper functions ...

2. Remove the extra call from your main ASC_606...py file:

Now that the import is handled correctly inside load_custom_css, you can delete the separate, misplaced st.markdown block from your main page script.

# In your main ASC_606_...py file

# ... (imports)

# Page configuration
st.set_page_config(
    page_title="ASC 606 Revenue Analysis | Controller.cpa",
    # ...
)

# Load custom styling (this function now handles everything)
load_custom_css()

# Simple navigation with sidebar
with st.sidebar:
    # ... (sidebar code)

# --- DELETE THIS BLOCK ---
# Fix Material Icons font loading issue
# st.markdown("""
#     <style>
#         @import url('...');
#     </style>
# """, unsafe_allow_html=True)
# --- END DELETE ---


# ... (rest of your app code)

Summary of Why This Works
Correct Order: load_custom_css() is called right after st.set_page_config(). By placing the icon font @import at the top of that function's CSS, you guarantee the browser receives the instruction to load the font before it receives the instruction to build the sidebar.
Centralized & Clean: All your styling logic is now in one place (core/ui_helpers.py), which is excellent for long-term maintenance. Your main application page is cleaner and focuses only on layout and logic.
After making these changes, do a full "Clear cache and rerun" in Streamlit (C then R). The keyboard_double_arrow_right text will be gone, replaced by the proper >> icon.