"""
ASC 606 Revenue Recognition Analysis Page
"""

import streamlit as st
import time
import json
from datetime import date
from typing import Optional, List, Dict, Any

from pydantic import BaseModel, ValidationError

# Import core components
# Note: In a real app, these would be in separate files.
# For this example, we'll assume they exist and work as intended.
# from core.analyzers import get_analyzer
# from core.models import ContractData, ASC606Analysis
# from core.ui_helpers import (render_analysis_metrics, render_step_analysis,
#                              render_professional_memo)
# from utils.document_extractor import DocumentExtractor
# from utils.llm import create_debug_sidebar

# =============================================================================
# Mocking Core Components for Standalone Execution
# In a real application, you would remove this section and use your actual imports.
# =============================================================================
class MockAnalyzer:
    def analyze_contract(self, text, data, debug_config=None):
        print("Mock analysis running with data:", data)
        time.sleep(2)
        class MockResults:
            def __init__(self, data):
                self.source_quality = "Hybrid RAG"
                self.citations = ["ASC 606-10-25-1", "ASC 606-10-55-36"]
                self.not_applicable_items = ["Warranty obligations"]
                self.implementation_guidance = ["Recognize implementation fee over the subscription term."]
                self.step1_contract_identification = f"A valid contract exists with {data.customer_name}. Collectibility is probable."
                self.step2_performance_obligations = "Identified POs: SaaS Subscription, Implementation Services. No material rights found."
                self.step3_transaction_price = "Transaction price is calculated based on fixed and variable components."
                self.step4_price_allocation = "Transaction price allocated based on relative SSP."
                self.step5_revenue_recognition = "SaaS revenue recognized over time; Implementation recognized over time."
                self.professional_memo = f"# Memo for {data.analysis_title}\n\nThis memo outlines the ASC 606 analysis..."
                self.raw_response = "This is the raw LLM response text for debugging."
        return MockResults(data)

def get_analyzer(standard):
    return MockAnalyzer()

class DocumentExtractor:
    def extract_text(self, file):
        return {
            'text': f"This is extracted text from {file.name}.",
            'method': 'mock_method',
            'word_count': 100
        }

def create_debug_sidebar():
    st.sidebar.title("üîß Debug Options")
    return {
        "show_raw_response": st.sidebar.checkbox("Show Raw AI Response", False)
    }

class ContractData(BaseModel):
    analysis_title: str
    customer_name: str
    arrangement_description: str
    contract_start: date
    contract_end: date
    currency: str
    uploaded_file_name: str
    contract_types: List[str]
    analysis_depth: str
    output_format: str
    include_citations: bool
    include_examples: bool
    additional_notes: Optional[str] = None
    # Tab 2 Fields
    collectibility: str
    is_combined_contract: str
    is_modification: str
    original_contract_uploaded: Optional[str] = None
    principal_agent_involved: str
    principal_agent_details: Optional[str] = None
    variable_consideration_involved: str
    variable_consideration_details: Optional[str] = None
    financing_component_involved: str
    financing_component_details: Optional[str] = None
    noncash_consideration_involved: str
    noncash_consideration_details: Optional[str] = None
    consideration_payable_involved: str
    consideration_payable_details: Optional[str] = None
    ssp_represents_contract_price: str
    revenue_recognition_timing_details: Optional[str] = None

# =============================================================================
# End Mocking Section
# =============================================================================

# Initialize session state
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None
if 'contract_data' not in st.session_state:
    st.session_state.contract_data = None
if 'selected_standard' not in st.session_state:
    st.session_state.selected_standard = 'ASC 606'


# Initialize analyzer and extractor
@st.cache_resource
def get_cached_analyzer():
    """Get cached analyzer instance"""
    return get_analyzer("ASC 606")


analyzer = get_cached_analyzer()
extractor = DocumentExtractor()

# Standard header
st.title("ASC 606 Contract Analysis")
st.write(
    "Complete the required fields (*) below, then click Analyze Contract. This tool uses AI to assist in applying the 5-step model for revenue recognition."
)

# Add debugging controls in sidebar
debug_config = create_debug_sidebar()

# Main application logic
if st.session_state.analysis_results is None:

    tab1, tab2, tab3 = st.tabs([
        "**üìã Step 1: Upload Contract**",
        "**üìù Step 2: Analysis Questions**",
        "**‚öôÔ∏è Step 3: Analyze**"
    ])

    # Tab 1: Contract Details & Upload
    with tab1:
        col1, col2 = st.columns(2, gap="small")
        with col1:
            analysis_title = st.text_input(
                "Analysis Title *",
                placeholder="e.g., Q4 Project Phoenix SOW",
                help="A unique name to identify this analysis")
        with col2:
            customer_name = st.text_input("Customer Name *",
                                          placeholder="e.g., ABC Corporation")

        col3, col4 = st.columns(2, gap="small")
        with col3:
            contract_types = st.multiselect(
                "Contract Document Types Included *", [
                    "Master Agreement", "Master Services Agreement (MSA)",
                    "Statement of Work (SOW)",
                    "Software as a Service (SaaS) Agreement",
                    "Software License Agreement",
                    "Professional Services Agreement",
                    "Sales Order / Order Form", "Purchase Order (PO)",
                    "Contract Amendment / Addendum", "Change Order",
                    "Reseller / Partner Agreement", "Invoice", "Other"
                ],
                help=
                "Select all document types that are part of this analysis. This helps the AI understand the relationship between the uploaded files."
            )

        with col4:
            currency = st.selectbox(
                "Currency *",
                ["USD", "EUR", "GBP", "CAD", "AUD", "KWR", "JPY", "Other"],
                help="Primary currency for the contract")

        col5, col6 = st.columns(2, gap="small")
        with col5:
            contract_start = st.date_input("Contract Start Date *")
        with col6:
            contract_end = st.date_input("Contract End Date *")

        arrangement_description = st.text_area(
            "Arrangement Description *",
            placeholder=
            "e.g., Three-year SaaS subscription with implementation services",
            height=100,
            help=
            "Description of the contractual arrangement - more detail is better to provide context for the AI"
        )

        st.subheader("üìÑ Document Upload")
        uploaded_files = st.file_uploader(
            "Upload All Related Contract Documents *",
            type=['pdf', 'docx', 'txt'],
            accept_multiple_files=True,
            help=
            "Crucial: Upload the complete set of related documents for this arrangement (e.g., the MSA, all SOWs, and any amendments)."
        )

        st.markdown("---")
        with st.container(border=True):
            st.info(
                "Once the fields above are complete, continue to the **üìù Step 2: Analysis Questions** tab.",
                icon="‚û°Ô∏è")

    # Tab 2: Analysis Questions (REVISED)
    with tab2:
        st.write(
            "This section helps our AI understand key details about the contract that may not be explicitly stated in the documents. Your answers will guide the analysis."
        )
        st.markdown("---")

        # --- STEP 1: Identify the Contract ---
        st.subheader("Step 1: Identify the Contract")
        collectibility = st.selectbox(
            "1.1 Is it probable that the entity will collect the consideration to which it will be entitled?",
            options=["Probable", "Not Probable"],
            index=0,
            key="collectibility",
            help="If collection of the full contract price is not probable, a contract may still exist for a lesser amount that is probable of collection. If no amount is probable, a contract does not exist under ASC 606."
        )
        is_combined_contract = st.selectbox(
            "1.2 Should all uploaded documents be evaluated together as a single deal?",
            options=["Yes", "No"],
            index=0,
            key="is_combined_contract"
        )
        is_modification = st.selectbox(
            "1.3 Is this a modification to an existing contract?",
            options=["Yes", "No"],
            index=1,
            key="is_modification"
        )
        original_contract_uploaded = None
        if is_modification == 'Yes':
            original_contract_uploaded = st.selectbox(
                "Have you also uploaded the original contract documents?",
                options=["Yes", "No"],
                index=1,
                key="original_contract_uploaded"
            )
        st.markdown("---")


        # --- STEP 2: Identify the Performance Obligations ---
        st.subheader("Step 2: Identify Performance Obligations")
        st.info("The AI will analyze the contract(s) to identify the distinct goods or services (performance obligations), including any customer options that may represent a **material right**. The results will be presented in the final analysis.", icon="ü§ñ")

        principal_agent_involved = st.selectbox(
            "2.1 Is a third party involved in providing any of the goods or services to the end customer?",
            options=["Yes", "No"],
            index=1,
            key="principal_agent_involved"
        )
        principal_agent_details = None
        if principal_agent_involved == 'Yes':
            principal_agent_details = st.text_area(
                "Please describe the arrangement. Specify which party controls the good or service before it is transferred to the customer.",
                placeholder="e.g., We are an agent for Party X's software, and they are responsible for fulfillment and support.",
                key="principal_agent_details"
            )
        st.markdown("---")

        # --- STEP 3: Determine the Transaction Price ---
        st.subheader("Step 3: Determine the Transaction Price")
        variable_consideration_involved = st.selectbox(
            "3.1 Does the contract include any variable consideration?",
            options=["Yes", "No"],
            index=1,
            key="variable_consideration_involved"
        )
        variable_consideration_details = None
        if variable_consideration_involved == 'Yes':
            variable_consideration_details = st.text_area(
                "Please provide any details on the variable consideration and your estimate of the amount to be included in the transaction price.",
                placeholder="e.g., A $10,000 performance bonus is included, which we estimate is 90% probable based on past performance.",
                key="variable_consideration_details"
            )

        financing_component_involved = st.selectbox(
            "3.2 Does the contract include a significant financing component?",
            options=["Yes", "No"],
            index=1,
            key="financing_component_involved"
        )
        financing_component_details = None
        if financing_component_involved == 'Yes':
            financing_component_details = st.text_area(
                "Please provide details on the financing component (e.g., payment timing, applicable interest rates).",
                key="financing_component_details"
            )

        noncash_consideration_involved = st.selectbox(
            "3.3 Does the contract include any noncash consideration (e.g., equity, customer-provided materials)?",
            options=["Yes", "No"],
            index=1,
            key="noncash_consideration_involved"
        )
        noncash_consideration_details = None
        if noncash_consideration_involved == 'Yes':
            noncash_consideration_details = st.text_area(
                "Please describe the noncash consideration and provide its estimated fair value.",
                key="noncash_consideration_details"
            )

        consideration_payable_involved = st.selectbox(
            "3.4 Does the contract include consideration payable to the customer (e.g., upfront credits, vouchers)?",
            options=["Yes", "No"],
            index=1,
            key="consideration_payable_involved"
        )
        consideration_payable_details = None
        if consideration_payable_involved == 'Yes':
            consideration_payable_details = st.text_area(
                "Please describe the consideration and provide its amount. Note: This typically reduces the transaction price.",
                key="consideration_payable_details"
            )
        st.markdown("---")


        # --- STEP 4: Allocate the Transaction Price ---
        st.subheader("Step 4: Allocate the Transaction Price")
        ssp_represents_contract_price = st.selectbox(
            "4.1 Do the prices for each good or service in the contract represent their Standalone Selling Price (SSP)?",
            options=["Yes", "No"],
            index=0,
            key="ssp_represents_contract_price",
            help="SSP is the price at which you would sell a good or service separately. If you believe the contract prices are a reasonable estimate of standalone value, select 'Yes'."
        )
        st.markdown("---")

        # --- STEP 5: Recognize Revenue ---
        st.subheader("Step 5: Recognize Revenue")
        revenue_recognition_timing_details = st.text_area(
            "5.1 Please describe when control is transferred for each major performance obligation.",
            placeholder='e.g., "Software license is delivered upfront," "Support services are provided evenly over 12 months," "Hardware control transfers upon shipment".',
            key="revenue_recognition_timing_details"
        )
        st.markdown("---")
        with st.container(border=True):
            st.info(
                "After completing your assessment, proceed to the **‚öôÔ∏è Step 3: Analyze** tab to run the analysis.",
                icon="‚û°Ô∏è")

    # Tab 3: Analysis and Submission
    with tab3:
        st.subheader("‚öôÔ∏è Analysis Configuration")
        analysis_depth = st.selectbox(
            "Analysis Depth", [
                "Standard Analysis", "Detailed Analysis",
                "Comprehensive Analysis"
            ],
            help="Choose the level of detail for your analysis")
        output_format = st.selectbox(
            "Output Format",
            ["Professional Memo", "Executive Summary", "Technical Analysis"],
            help="Select the format for your analysis results")
        include_citations = st.checkbox(
            "Include Citations",
            value=True,
            help="Include authoritative source citations in the analysis")
        include_examples = st.checkbox(
            "Include Examples",
            value=False,
            help="Include practical examples and illustrations")
        additional_notes = st.text_area(
            "Additional Notes",
            placeholder=
            "Any specific requirements or context for this analysis...",
            height=100,
            help="Optional notes to guide the analysis")

        def validate_form(data):
            """Gathers all validation errors into a list."""
            errors = []
            if not data['analysis_title']:
                errors.append("Analysis Title is required (Step 1).")
            if not data['customer_name']:
                errors.append("Customer Name is required (Step 1).")
            if not data['arrangement_description']:
                errors.append("Arrangement Description is required (Step 1).")
            if not data['contract_types']:
                errors.append(
                    "At least one Contract Document Type must be selected (Step 1)."
                )
            if not data['uploaded_files']:
                errors.append(
                    "At least one document must be uploaded (Step 1).")
            return errors

        st.markdown("---")
        st.write(
            "Click the button below to begin the AI analysis. This may take a few moments."
        )
        if st.button("üîç Analyze Contract",
                     use_container_width=True,
                     type="primary"):

            form_data = {
                "analysis_title": analysis_title,
                "customer_name": customer_name,
                "arrangement_description": arrangement_description,
                "contract_types": contract_types,
                "uploaded_files": uploaded_files,
            }

            validation_errors = validate_form(form_data)

            if validation_errors:
                st.error("Please fix the following issues before submitting:")
                for error in validation_errors:
                    st.warning(f"‚Ä¢ {error}")
                st.stop()

            with st.status("üîç Analyzing contract...", expanded=True) as status:
                try:
                    st.write("üìÑ Extracting text from uploaded documents...")
                    all_extracted_text = []
                    for uploaded_file in uploaded_files:
                        extraction_result = extractor.extract_text(uploaded_file)
                        if extraction_result.get('text'):
                            all_extracted_text.append(extraction_result['text'])
                    if not all_extracted_text:
                        st.error("No text could be extracted from the uploaded documents")
                        st.stop()
                    combined_text = "\n".join(all_extracted_text)
                    st.write("üß† Processing contract data and your answers...")
                    time.sleep(0.5)

                    # Instantiate the Pydantic model with all data from tabs
                    contract_data = ContractData(
                        analysis_title=analysis_title,
                        customer_name=customer_name,
                        arrangement_description=arrangement_description,
                        contract_start=contract_start,
                        contract_end=contract_end,
                        currency=currency,
                        uploaded_file_name=", ".join([f.name for f in uploaded_files]),
                        contract_types=contract_types,
                        analysis_depth=analysis_depth,
                        output_format=output_format,
                        include_citations=include_citations,
                        include_examples=include_examples,
                        additional_notes=additional_notes,
                        # Tab 2 Data
                        collectibility=collectibility,
                        is_combined_contract=is_combined_contract,
                        is_modification=is_modification,
                        original_contract_uploaded=original_contract_uploaded,
                        principal_agent_involved=principal_agent_involved,
                        principal_agent_details=principal_agent_details,
                        variable_consideration_involved=variable_consideration_involved,
                        variable_consideration_details=variable_consideration_details,
                        financing_component_involved=financing_component_involved,
                        financing_component_details=financing_component_details,
                        noncash_consideration_involved=noncash_consideration_involved,
                        noncash_consideration_details=noncash_consideration_details,
                        consideration_payable_involved=consideration_payable_involved,
                        consideration_payable_details=consideration_payable_details,
                        ssp_represents_contract_price=ssp_represents_contract_price,
                        revenue_recognition_timing_details=revenue_recognition_timing_details
                    )

                    st.write("‚ö° Running AI analysis with hybrid RAG system...")
                    analysis_results = analyzer.analyze_contract(
                        combined_text,
                        contract_data,
                        debug_config=debug_config)
                    st.session_state.analysis_results = analysis_results
                    st.session_state.contract_data = contract_data
                    status.update(label="‚úÖ Analysis complete!",
                                  state="complete")
                    st.success("Analysis completed successfully!")
                    time.sleep(1)
                    st.rerun()
                except ValidationError as e:
                    st.error(f"Data validation error: {e}")
                    st.stop()
                except Exception as e:
                    st.error(f"An unexpected error occurred during analysis: {str(e)}")
                    st.stop()

# This part remains the same, it just renders the results after they are generated.
else:
    analysis_results = st.session_state.analysis_results
    contract_data = st.session_state.contract_data

    col1, col2 = st.columns([3, 1])
    with col1:
        st.subheader(f"üìä Analysis Results: {contract_data.analysis_title}")
    with col2:
        if st.button("üîÑ New Analysis", use_container_width=True):
            # Clear all session state keys to reset the app
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

    # Display results... (this part of the code can remain as is)
    with st.container(border=True):
        st.markdown("**üìä Analysis Overview**")
        metrics_col1, metrics_col2, metrics_col3, metrics_col4 = st.columns(4)
        with metrics_col1:
            st.metric("Source Quality", analysis_results.source_quality or "Hybrid RAG")
        with metrics_col2:
            st.metric("Analysis Depth", contract_data.analysis_depth.title())
        with metrics_col3:
            st.metric("Currency", contract_data.currency)
        with metrics_col4:
            citations_count = len(analysis_results.citations) if analysis_results.citations else 0
            st.metric("Citations", citations_count)

    st.markdown("---")
    st.subheader("üìã ASC 606 Five-Step Analysis Summary")
    steps = [
        ("Contract Identification", analysis_results.step1_contract_identification),
        ("Performance Obligations", analysis_results.step2_performance_obligations),
        ("Transaction Price", analysis_results.step3_transaction_price),
        ("Price Allocation", analysis_results.step4_price_allocation),
        ("Revenue Recognition", analysis_results.step5_revenue_recognition)
    ]
    for i, (step_name, step_data) in enumerate(steps, 1):
        with st.expander(f"**Step {i}: {step_name}**", expanded=(i==1)): # Expand first step by default
            st.markdown(str(step_data))

    st.markdown("---")
    st.subheader("üìã Professional Accounting Memo")
    if analysis_results.professional_memo:
        with st.container(border=True):
            st.markdown(analysis_results.professional_memo)
            memo_bytes = analysis_results.professional_memo.encode('utf-8')
            st.download_button(
                label="üìÑ Download Memo",
                data=memo_bytes,
                file_name=f"{contract_data.analysis_title.replace(' ', '_')}_ASC606_Memo.txt",
                mime="text/plain")

    st.markdown("---")
    st.subheader("üìö Additional Analysis Details")
    if analysis_results.implementation_guidance:
        with st.expander("Implementation Guidance"):
            for guidance in analysis_results.implementation_guidance:
                st.write(f"‚Ä¢ {guidance}")
    if analysis_results.citations:
        with st.expander("Source Citations"):
            for citation in analysis_results.citations:
                st.write(f"‚Ä¢ {citation}")
    if analysis_results.not_applicable_items:
        with st.expander("Not Applicable Items"):
            for item in analysis_results.not_applicable_items:
                st.write(f"‚Ä¢ {item}")